# --- Poetry setup ------------------------------------------------------------

[tool.poetry]
name = "recollect-backend"
version = "1.55.6"
description = "re:collect backend systems"
authors = ["re:collect developers <dev@re-collect.ai>"]
repository = "https://github.com/re-collect/k8s-backend"
packages = [
  # Packages to include in the build
  { include = "common", from = "src" },
  { include = "recollect", from = "src" },
  { include = "http_servers", from = "src" },
  { include = "workers", from = "src" },
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# --- Dependencies ------------------------------------------------------------

[tool.poetry.dependencies]
# Python version explicitly locked to 3.11.x
python = "~3.11"
# Other dependencies can be liberally updated up to next major version.
# poetry.lock ensures reproducibility until `poetry update` is run.
boto3 = "^1.34.15"
datadog = "^0.47.0"
ddtrace = "^2.4.0"
dynaconf = "^3.2.4"
en_core_web_sm = { url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.7.0/en_core_web_sm-3.7.0-py3-none-any.whl" }
fastapi = "^0.104.0"
fastapi-cognito = "^2.4.2"
feedparser = "^6.0.11"
humanize = "^4.9.0"
launchdarkly-server-sdk = "^9.1.0"
loguru = "^0.7.2"
mypy-boto3-cognito-idp = "^1.34.3"
mypy-boto3-s3 = "^1.34.14"
mypy-boto3-sqs = "^1.34.0"
pandas = "^2.1.4"
psycopg2-binary = "^2.9.9"
pydantic = "^2.5.3"
pymupdf = "^1.23.8"
pynvml = "^11.5.0"
requests = "^2.31.0"
sendgrid = "^6.11.0"
snscrape = "^0.7.0.20230622"
spacy = "^3.7.2"
sqlalchemy = "^2.0.25"
tenacity = "^8.2.3"
trafilatura = "^1.6.4"
uvicorn = "^0.23.2"
weaviate-client = "^3.26.0"
pytest-localserver = "^0.8.1"
neo4j = "^5.16.0"
corextopic = "^1.1"
matplotlib = "^3.8.2"
ipykernel = "^6.29.2"
requests-oauthlib = "^1.4.0"
pyarrow = "^15.0.2"
pip = "^24.0"
pytesseract = "^0.3.10"
pillow = "^10.3.0"
markdown = "^3.6"
boto3-stubs = "^1.34.78"
opencv-python = "^4.9.0.80"
lxml-html-clean = "^0.1.1"
holoviews = "^1.18.3"
hvplot = "^0.9.2"
datashader = "^0.16.1"
scikit-image = "^0.23.2"
jupyter-bokeh = "^4.0.4"
aiostream = "^0.6.1"
sseclient = "^0.0.27"

[tool.poetry.group.test]
optional = true
[tool.poetry.group.test.dependencies]
alembic = "^1.13.1"
docker = "^6.1.3"
pyhamcrest = "^2.1.0"
pytest = "^7.4.4"
pytest-integration-mark = "^0.2.0"
testcontainers = "^3.7.1"
httpx = "^0.25.1"
pytest-localserver = "^0.8.1"
pytest-timeout = "^2.2.0"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
alembic = "^1.13.1"
pre-commit = "^3.6.0"
psycopg2-binary = "^2.9.9"
jupyter = "^1.0.0"
ipykernel = "^6.28.0"
nltk = "^3.8.1"
scipy = "^1.12.0"
scikit-learn = "^1.4.0"
recordlinkage = "^0.16"

[tool.poetry.group.infra]
optional = true
[tool.poetry.group.infra.dependencies]
pulumi = "^3.101.1"
pulumi-docker = "^4.5.0"
pulumi-eks = "^2.0.0"

# --- Tasks -------------------------------------------------------------------

[tool.poe]
# Default command is `poe`, which means we'd have to run `poetry poe <task>`.
# Setting it to "" means we can call the task directly, e.g. `poetry test`.
poetry_command = ""

[tool.poe.tasks]
info.cmd = "./dev/scripts/show_dev_help.sh"
unit-test.cmd = "poetry run pytest"
test.cmd = "poetry run pytest --with-integration"

[tool.poe.tasks.dep-sync]
help = "Sync dependencies from pyproject.toml to poetry.lock, installing new and removing unused dependencies."
cmd = "poetry install --sync --with dev,test,infra"

[tool.poe.tasks.dep-upgrade]
help = "Upgrade (and install) dependencies in pyproject.toml to latest compatible versions."
sequence = [{ cmd = "poetry up --with dev,test,infra" }, { ref = "dep-sync" }]

[tool.poe.tasks.containers]
help = "Manage 3rd-party API containers (localstack, postgres, etc.)"
args = [{ name = "action", positional = true }]
cmd = "./dev/scripts/containers.sh $action"

[tool.poe.tasks.bootstrap]
deps = ["containers start"]
cmd = "./dev/scripts/bootstrap_dependencies.sh"

[tool.poe.tasks.run-workers]
envfile = ".env"
args = [
  { name = "worker", positional = true, multiple = true, required = true },
]
sequence = [
  { ref = "dep-sync" },
  { cmd = "poetry run python ./dev/scripts/run_workers.py $worker", use_exec = true },
]

[tool.poe.tasks.run-server]
envfile = ".env"
args = [{ name = "server", positional = true, default = "api" }]
sequence = [
  { ref = "dep-sync" },
  { cmd = "poetry run uvicorn http_servers.$server:app --reload" },
]

[tool.poe.tasks.get-bearer-token]
envfile = ".env"
args = [
  { name = "username", positional = true, default = "dev@re-collect.local" },
  { name = "password", positional = true, default = "recollect" },
  { name = "env", default = "local", options = [
    "-e",
    "--env",
  ] },
]
cmd = "./dev/scripts/get_bearer_token.sh $username $password $env"

[tool.poe.tasks.kubectx]
args = [{ name = "env", positional = true }]
cmd = "./dev/scripts/kubectl_context.sh $env"

[tool.poe.tasks.dbproxy]
args = [
  { name = "env", default = "dev", positional = true },
  { name = "port", default = "5432" },
]
sequence = [
  { ref = "kubectx $env" },
  { cmd = "./dev/scripts/dbproxy.sh $env $port" },
]

[tool.poe.tasks.dbconnect]
args = [
  { name = "env", default = "dev", positional = true },
  { name = "port", default = "5432" },
]
# Using deps instead of sequence because of use_exec (not supported for seq)
deps = ["kubectx $env"]
use_exec = true
cmd = "./dev/scripts/dbproxy.sh $env $port connect"

[tool.poe.tasks.deploy]
args = [{ name = "env", default = "dev", positional = true }]
sequence = [
  { ref = "kubectx $env" },
  # NB: poetry kubectx will fail if $ENV is not 'dev' or 'prod'
  { cmd = "pulumi up --stack recollect/$env" },
]

[tool.poe.tasks.refresh-deploy]
args = [{ name = "env", default = "dev", positional = true }]
sequence = [
  { ref = "kubectx $env" },
  # NB: poetry kubectx will fail if $ENV is not 'dev' or 'prod'
  { cmd = "pulumi refresh --stack recollect/$env" },
]

[tool.poe.tasks.deploy_ci]
args = [{ name = "env", required = true, positional = true }]
sequence = [
  { ref = "kubectx $env" },
  { cmd = "pulumi up --stack recollect/$env --skip-preview --non-interactive" },
]

[tool.poe.tasks.twitter-update-bearer-token]
args = [{ name = "env", required = true, positional = true }]
cmd = "./dev/scripts/twitter_update_bearer_token.sh $env"

# --- Other tools -------------------------------------------------------------

[tool.pyright]
# Justifiable typechecking exclusions.
# Add comments with new entries.
ignore = [
  # notebooks/scratchpad
  "notebooks",
]
